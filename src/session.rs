use crate::db;
use crate::models::NewConversation;
use crate::server;
use actix::prelude::*;
use actix_web::web;
use actix_web_actors::ws;
use serde::{Deserialize, Serialize};
use sqlx::{Pool, Postgres};
use std::time::{Duration, Instant};
use uuid::Uuid;

const HEARBEET: Duration = Duration::from_secs(5);
const CLIENT_TIMEOUT: Duration = Duration::from_secs(10);

// resembles each client connection via websockets
// client is different from a user, as a user can connect via multiple clients "devices"
#[derive(Debug)]
pub struct WsChatSession {
    // session id assigned by the ChatServer actor inside WsChatSession::started method
    pub id: usize,
    // connected user_id
    pub user_id: Uuid,
    // used to track client's last active time
    // so it handles the connection health
    // and drops inactive connections for a specific amount of time
    pub hb: Instant,
    // the address of ChatServer actor instance
    pub addr: Addr<server::ChatServer>,
    // a copy of the database connection pool
    pub db_pool: web::Data<Pool<Postgres>>,
}

// used in the server actor in the connect, disconnect, and join handlers
#[derive(PartialEq, Serialize, Deserialize)]
pub enum ChatType {
    TYPING,
    TEXT,
    CONNECT,
    DISCONNECT,
}
#[derive(Serialize, Deserialize)]
struct ChatMessage {
    pub chat_type: ChatType,
    pub value: Vec<String>,
    // TODO: convert it to Uuid
    pub room_id: String,
    // TODO: convert it to Uuid
    pub user_id: String,
    pub id: usize,
}

impl Actor for WsChatSession {
    type Context = ws::WebsocketContext<Self>;
    // logic to execute after the actor is started
    fn started(&mut self, ctx: &mut Self::Context) {
        println!(
            "WsChatSession started for user_id {}",
            self.user_id.to_string()
        );

        self.hb(ctx);
        let addr = ctx.address();
        self.addr
            .send(server::Connect {
                addr: addr.recipient(),
                user_id: self.user_id,
            })
            .into_actor(self)
            .then(|res, act, ctx| {
                match res {
                    // res is the actor id generated by the ChatServer actor
                    Ok(res) => act.id = res,
                    _ => ctx.stop(),
                }
                fut::ready(())
            })
            .wait(ctx);
    }
    // logic to execute b4 stopping the actor
    fn stopping(&mut self, _: &mut Self::Context) -> Running {
        println!("WsChatSession is stopping");
        self.addr.do_send(server::Disconnect {
            id: self.id,
            user_id: self.user_id,
        });
        Running::Stop
    }
}
impl Handler<server::Message> for WsChatSession {
    type Result = ();
    // sends the conencted client messages that come from the ChatServer actor
    fn handle(&mut self, msg: server::Message, ctx: &mut Self::Context) -> Self::Result {
        // TODO: change the Messge struct to contain the room id
        println!("WsChatSession received a ChatServer msg: {}", msg.0);
        ctx.text(msg.0);
    }
}
impl StreamHandler<Result<ws::Message, ws::ProtocolError>> for WsChatSession {
    // handles the incoming messages from the owner client of a Session actor instance
    fn handle(&mut self, item: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {
        let msg = match item {
            Err(_) => {
                ctx.stop();
                return;
            }
            Ok(msg) => msg,
        };
        match msg {
            ws::Message::Ping(msg) => {
                println!("WsChatSession received a Client msg {:?}", msg);
                self.hb = Instant::now();
                ctx.pong(&msg);
            }
            ws::Message::Pong(_) => {
                println!("WsChatSession received a Client msg {:?}", msg);
                self.hb = Instant::now();
            }
            ws::Message::Text(text) => {
                println!("WsChatSession received a Client msg: {}", &text.to_string());
                // this line only validates the data is sent in the right format
                let data_json = serde_json::from_str::<ChatMessage>(&text.to_string());
                if let Err(err) = data_json {
                    println!("{err}");
                    println!("Failed to parse message: {text}");
                    return;
                }
                let input = data_json.as_ref().unwrap();
                match &input.chat_type {
                    ChatType::TYPING => {
                        let chat_msg = ChatMessage {
                            chat_type: ChatType::TYPING,
                            value: input.value.to_vec(),
                            id: self.id,
                            room_id: input.room_id.to_string(),
                            user_id: input.user_id.to_string(),
                        };
                        let msg = serde_json::to_string(&chat_msg).unwrap();
                        self.addr.do_send(server::ClientMessage {
                            id: self.id,
                            msg,
                            room_id: Uuid::parse_str(&chat_msg.room_id)
                                .expect("failed to parse chat_msg room_id"),
                        })
                    }
                    ChatType::TEXT => {
                        // unneeded re-creation of input
                        // TODO: delete re-creation of input binding
                        let input = data_json.as_ref().unwrap();
                        let chat_msg = ChatMessage {
                            chat_type: ChatType::TEXT,
                            value: input.value.to_vec(),
                            id: self.id,
                            room_id: input.room_id.to_string(),
                            user_id: input.user_id.to_string(),
                        };
                        let conn = self.db_pool.clone();
                        let new_conversation = NewConversation {
                            user_id: Uuid::parse_str(&input.user_id)
                                .expect("failed to parse user_id"),
                            room_id: Uuid::parse_str(&input.room_id)
                                .expect("failed to parse room_id"),
                            message: input.value.join(""),
                        };
                        let _ = db::insert_new_conversation(&conn, new_conversation);
                        let msg = serde_json::to_string(&chat_msg).unwrap();
                        self.addr.do_send(server::ClientMessage {
                            id: self.id,
                            msg,
                            room_id: Uuid::parse_str(&chat_msg.room_id)
                                .expect("failed to parse chat_msg room_id"),
                        })
                    }
                    _ => {}
                }
            }
            ws::Message::Binary(_) => println!("Unsupported binary"),
            ws::Message::Close(reason) => {
                ctx.close(reason);
                ctx.stop();
            }
            ws::Message::Continuation(_) => {
                ctx.stop();
            }
            ws::Message::Nop => (),
        }
    }
}
impl WsChatSession {
    // stops inactive connections
    fn hb(&self, ctx: &mut ws::WebsocketContext<Self>) {
        println!("WsChatSession stopped due to inactivitiy");
        ctx.run_interval(HEARBEET, |act, ctx| {
            if Instant::now().duration_since(act.hb) > CLIENT_TIMEOUT {
                act.addr.do_send(server::Disconnect {
                    id: act.id,
                    user_id: act.user_id,
                });
                ctx.stop();
                return;
            }
            ctx.ping(b"");
        });
    }
}
